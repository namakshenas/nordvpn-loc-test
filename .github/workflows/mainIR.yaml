name: UpdateNordVPNlistIR

on:
  schedule:
    - cron: '0 */1 * * *'

  workflow_dispatch:

jobs:
  download-lists:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download server lists
        run: |
          mkdir -p list
          declare -a countrycode=("au" "fr" "nl" "sg" "uk" "us")
          declare -a countryid=("13" "74" "153" "195" "227" "228")
          for (( i=0; i<${#countrycode[@]}; i++ ));
          do
            curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[country_id\]=${countryid[$i]}&filters\[servers_technologies\]\[identifier\]=openvpn_udp&limit=1000" | jq --raw-output '.[].hostname' | sort > list/${countrycode[$i]}.txt
          done
      
      - uses: actions/upload-artifact@v4
        with:
          name: server-lists
          path: list/

  test-servers:
    needs: download-lists
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        country: [au, fr, nl, sg, uk, us]
      max-parallel: 6
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v4
        with:
          name: server-lists
          path: list/
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass
      - name: Debug secrets
        run: |
          echo "VPS_IP is ${VPS_IP:+set}"
          echo "VPS_USER is ${VPS_USER:+set}"
          echo "VPS_PASS is ${VPS_PASS:+set}"
      - name: Test ${{ matrix.country }} servers
        env:
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PASS: ${{ secrets.VPS_PASS }}
          NORDVPN_USER: ${{ secrets.NORDVPN_USER }}
          NORDVPN_PASS: ${{ secrets.NORDVPN_PASS }}
          COUNTRY: ${{ matrix.country }}
        run: |
          mkdir -p list-IR
          
          # Verify credentials
          if [[ -z "$VPS_IP" || -z "$VPS_USER" || -z "$VPS_PASS" ]]; then
            echo "ERROR: VPS credentials not set in GitHub Secrets"
            exit 1
          fi
          
          echo "Setting up NordVPN with SSH preservation on VPS..."
          
          # Create a comprehensive test script that preserves SSH
          cat > test_script.sh << 'SCRIPT'
          #!/bin/bash
          COUNTRY=$1
          NORDVPN_USER=$2
          NORDVPN_PASS=$3
          SSH_IP=$(echo $SSH_CLIENT | awk '{print $1}')
          
          # Function to preserve SSH connection
          preserve_ssh() {
              # Get current default gateway
              DEFAULT_GW=$(ip route | grep default | awk '{print $3}')
              DEFAULT_DEV=$(ip route | grep default | awk '{print $5}')
              
              # Add route to keep SSH traffic through original gateway
              if [ ! -z "$SSH_IP" ]; then
                  sudo ip route add $SSH_IP via $DEFAULT_GW dev $DEFAULT_DEV 2>/dev/null || true
              fi
              
              # Also preserve route to GitHub Actions
              sudo ip route add 140.82.112.0/20 via $DEFAULT_GW dev $DEFAULT_DEV 2>/dev/null || true
              sudo ip route add 140.82.113.0/24 via $DEFAULT_GW dev $DEFAULT_DEV 2>/dev/null || true
          }
          
          # Install NordVPN if needed
          if ! command -v nordvpn &> /dev/null; then
              echo "Installing NordVPN..."
              curl -sSL https://downloads.nordcdn.com/apps/linux/install.sh | sh
              sudo systemctl start nordvpnd
              sleep 5
          fi
          
          # Configure NordVPN to preserve LAN access
          nordvpn set lan-discovery on &>/dev/null || true
          
          # Login if needed
          if ! nordvpn account &>/dev/null; then
              echo "$NORDVPN_PASS" | nordvpn login --username "$NORDVPN_USER" || exit 1
          fi
          
          # Set technology and protocol
          nordvpn set technology openvpn &>/dev/null || true
          nordvpn set protocol udp &>/dev/null || true
          nordvpn set killswitch off &>/dev/null || true
          nordvpn set firewall off &>/dev/null || true
          
          # Whitelist SSH port and local network
          nordvpn whitelist add port 22 &>/dev/null || true
          nordvpn whitelist add subnet 10.0.0.0/8 &>/dev/null || true
          nordvpn whitelist add subnet 172.16.0.0/12 &>/dev/null || true
          nordvpn whitelist add subnet 192.168.0.0/16 &>/dev/null || true
          
          # Test servers
          > /tmp/${COUNTRY}_results.txt
          
          while IFS= read -r server; do
              server_name=$(echo $server | cut -d'.' -f1)
              
              # Preserve SSH before each connection
              preserve_ssh
              
              # Test connection in background to prevent SSH lockup
              (
                  nordvpn disconnect &>/dev/null || true
                  sleep 1
                  
                  if timeout 10 nordvpn connect $server_name &>/dev/null; then
                      # Test latency
                      latency=$(ping -c 2 -W 1 8.8.8.8 2>/dev/null | tail -1 | cut -d/ -f5 | cut -d. -f1)
                      
                      if [[ -n "$latency" && "$latency" -lt 100 ]]; then
                          echo "$server" >> /tmp/${COUNTRY}_results.txt
                          echo "✓ $server: ${latency}ms"
                      fi
                      
                      nordvpn disconnect &>/dev/null
                  fi
              ) &
              
              # Limit concurrent tests
              while [ $(jobs -r | wc -l) -ge 10 ]; do
                  sleep 0.5
              done
          done < /tmp/${COUNTRY}.txt
          
          # Wait for remaining jobs
          wait
          
          # Output results
          cat /tmp/${COUNTRY}_results.txt
          
          # Final disconnect
          nordvpn disconnect &>/dev/null || true
          
          # Report
          echo "Completed ${COUNTRY}: $(wc -l < /tmp/${COUNTRY}_results.txt) servers with <100ms"
          SCRIPT
          
          # Copy server list and script to VPS
          sshpass -p "$VPS_PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            list/${COUNTRY}.txt ${VPS_USER}@${VPS_IP}:/tmp/${COUNTRY}.txt
          
          sshpass -p "$VPS_PASS" scp -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            test_script.sh ${VPS_USER}@${VPS_IP}:/tmp/test_script.sh
          
          # Run test script and get results
          echo "Testing ${COUNTRY} servers..."
          sshpass -p "$VPS_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 \
            -o ServerAliveInterval=30 -o ServerAliveCountMax=10 \
            ${VPS_USER}@${VPS_IP} \
            "chmod +x /tmp/test_script.sh && /tmp/test_script.sh '${COUNTRY}' '${NORDVPN_USER}' '${NORDVPN_PASS}'" \
            > list-IR/${COUNTRY}.txt
          
          # Cleanup
          sshpass -p "$VPS_PASS" ssh -o StrictHostKeyChecking=no ${VPS_USER}@${VPS_IP} \
            "rm -f /tmp/${COUNTRY}.txt /tmp/test_script.sh /tmp/${COUNTRY}_results.txt" || true
          
          # Show results
          echo "Results for ${COUNTRY}: $(wc -l < list-IR/${COUNTRY}.txt) servers"
          
      - uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.country }}
          path: list-IR/${{ matrix.country }}.txt

  commit-results:
    needs: test-servers
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      
      - name: Download original lists
        uses: actions/download-artifact@v4
        with:
          name: server-lists
          path: list/
      
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Consolidate results
        run: |
          mkdir -p list-IR
          
          for country in au fr nl sg uk us; do
            if [ -f "artifacts/results-$country/$country.txt" ]; then
              cp "artifacts/results-$country/$country.txt" list-IR/
              echo "✓ Copied results for $country: $(wc -l < list-IR/$country.txt) servers"
            else
              touch list-IR/$country.txt
              echo "✗ No results for $country"
            fi
          done
          
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update server lists"
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
