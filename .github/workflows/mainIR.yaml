name: UpdateNordVPNlistOR

on:
  schedule:
    - cron: '0 */1 * * *'

  workflow_dispatch:

jobs:
  download-lists:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download server lists
        run: |
          mkdir -p list
          declare -a countrycode=("au" "fr" "nl" "sg" "uk" "us")
          declare -a countryid=("13" "74" "153" "195" "227" "228")
          for (( i=0; i<${#countrycode[@]}; i++ ));
          do
            curl --silent "https://api.nordvpn.com/v1/servers/recommendations?filters\[country_id\]=${countryid[$i]}&filters\[servers_technologies\]\[identifier\]=openvpn_udp&limit=1000" | jq --raw-output '.[].hostname' | sort > list/${countrycode[$i]}.txt
          done
      
      - uses: actions/upload-artifact@v3
        with:
          name: server-lists
          path: list/

  test-servers:
    needs: download-lists
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      matrix:
        country: [au, fr, nl, sg, uk, us]
      max-parallel: 6
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/download-artifact@v3
        with:
          name: server-lists
          path: list/
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y sshpass parallel
      
      - name: Test ${{ matrix.country }} servers
        env:
          VPS_IP: ${{ secrets.VPS_IP }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_PASS: ${{ secrets.VPS_PASS }}
          NORDVPN_USER: ${{ secrets.NORDVPN_USER }}
          NORDVPN_PASS: ${{ secrets.NORDVPN_PASS }}
          COUNTRY: ${{ matrix.country }}
        run: |
          mkdir -p list-IR
          
          # Setup NordVPN on VPS (quick check if already setup)
          echo "Ensuring NordVPN is ready on VPS..."
          sshpass -p "$VPS_PASS" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${VPS_USER}@${VPS_IP} bash << 'EOF'
          # Quick check if NordVPN is installed and logged in
          if ! command -v nordvpn &> /dev/null; then
            curl -sSL https://downloads.nordcdn.com/apps/linux/install.sh | sh
            sudo systemctl start nordvpnd
            sleep 5
          fi
          
          # Ensure logged in
          if ! nordvpn account &>/dev/null; then
            echo "$NORDVPN_PASS" | nordvpn login --username "$NORDVPN_USER"
          fi
          
          nordvpn set technology openvpn &>/dev/null || true
          nordvpn set protocol udp &>/dev/null || true
          nordvpn set killswitch off &>/dev/null || true
          EOF
          
          # Create test function
          test_server() {
            local server="$1"
            local vps_ip="$2"
            local vps_user="$3"
            local vps_pass="$4"
            
            server_name=$(echo $server | cut -d'.' -f1)
            
            # Quick test with strict timeout
            result=$(sshpass -p "$vps_pass" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=3 \
              ${vps_user}@${vps_ip} "timeout 8 bash -c '
                nordvpn disconnect &>/dev/null || true
                if nordvpn connect $server_name &>/dev/null; then
                  latency=\$(ping -c 2 -W 1 8.8.8.8 2>/dev/null | tail -1 | cut -d/ -f5 | cut -d. -f1)
                  nordvpn disconnect &>/dev/null
                  if [[ -n \"\$latency\" && \"\$latency\" -lt 100 ]]; then
                    echo \"OK:\$latency\"
                  fi
                fi
              '" 2>/dev/null)
            
            if [[ $result == OK:* ]]; then
              echo "$server"
            fi
          }
          
          # Export function and variables for parallel
          export -f test_server
          export VPS_IP VPS_USER VPS_PASS
          
          # Test all servers in parallel (30 concurrent connections max)
          echo "Testing ${COUNTRY} servers in parallel..."
          
          cat list/${COUNTRY}.txt | \
          parallel -j 30 --timeout 12 --no-notice \
            test_server {} "$VPS_IP" "$VPS_USER" "$VPS_PASS" \
            > list-IR/${COUNTRY}.txt 2>/dev/null
          
          # Report results
          count=$(wc -l < list-IR/${COUNTRY}.txt 2>/dev/null || echo 0)
          echo "✓ ${COUNTRY}: Found $count servers with <100ms latency"
      
      - uses: actions/upload-artifact@v3
        with:
          name: results-${{ matrix.country }}
          path: list-IR/${{ matrix.country }}.txt

  commit-results:
    needs: test-servers
    runs-on: ubuntu-latest
    if: always()  # Run even if some country tests fail
    steps:
      - uses: actions/checkout@v4
      
      - name: Download original lists
        uses: actions/download-artifact@v3
        with:
          name: server-lists
          path: list/
      
      - name: Download test results
        uses: actions/download-artifact@v3
        with:
          path: artifacts/
      
      - name: Consolidate results
        run: |
          mkdir -p list-IR
          
          # Copy results from each country
          for country in au fr nl sg uk us; do
            if [ -f "artifacts/results-$country/$country.txt" ]; then
              cp "artifacts/results-$country/$country.txt" list-IR/
              echo "✓ Copied results for $country: $(wc -l < list-IR/$country.txt) servers"
            else
              # Create empty file if test failed
              touch list-IR/$country.txt
              echo "✗ No results for $country (test may have failed)"
            fi
          done
          
          # Summary report
          echo "=== Final Summary ==="
          for country in au fr nl sg uk us; do
            total=$(wc -l < list/$country.txt 2>/dev/null || echo 0)
            good=$(wc -l < list-IR/$country.txt 2>/dev/null || echo 0)
            echo "$country: $good/$total servers with <100ms latency"
          done
          
      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "Update server lists"
          commit_user_name: 'github-actions[bot]'
          commit_user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
